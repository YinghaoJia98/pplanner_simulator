<launch>
    <arg name="rname" default="a1"/>
    <arg name="conveyor" default="0"/>
    <arg name="robot_path" value="(find $(arg rname)_description)"/>
    <arg name="dollar" value="$"/>
    <!-- Debug mode will hung up the robot, use "true" or "false" to switch it. -->
    <arg name="user_debug" default="false"/>
    <arg name="joystick" default="false"/>
    
    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(arg dollar)$(arg robot_path)/xacro/robot.xacro' 
           DEBUG:=$(arg user_debug)"/>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- Set trunk and joint positions at startup -->
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen"
          args="
          -urdf
          -x 0.0
          -y 0.0
          -z 0.5
          -Y 0.0
          -model $(arg rname)_gazebo
          -param robot_description
          -unpause"/>

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(arg dollar)$(arg robot_path)/config/robot_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="false"
          output="screen" ns="/$(arg rname)_gazebo" args="joint_state_controller
          FL_hip_controller FL_thigh_controller FL_calf_controller
          FR_hip_controller FR_thigh_controller FR_calf_controller
          RL_hip_controller RL_thigh_controller RL_calf_controller
          RR_hip_controller RR_thigh_controller RR_calf_controller "/>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"
          respawn="false" output="screen">
        <remap from="/joint_states" to="/$(arg rname)_gazebo/joint_states"/>
    </node>

    <node name="message_to_tf" pkg="smb_gazebo" type="message_to_tf" output="screen">
      <param name="odometry_topic" value="ground_truth/state"/>
      <param name="frame_id" value="world"/>
      <param name="child_frame_id" value="base"/>
    </node>

    <node name="odom_to_world_tf" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 /world /odom 10"/>

    <!-- <node pkg="unitree_gazebo" type="servo" name="servo" required="true" output="screen"/> -->

    <!-- load the parameter unitree_controller -->
    <include file="$(find unitree_controller)/launch/set_ctrl.launch">
        <arg name="rname" value="$(arg rname)"/>
    </include>

    <node pkg="twist_mux" type="twist_mux" name="twist_mux">
      <rosparam command="load" file="$(find smb_lowlevel_controller)/config/twist_mux.yaml" />
      <remap from="cmd_vel_out" to="unitree_velocity_controller/cmd_vel"/>
    </node>

    <!-- Spawn human control nodes -->
    <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen"/>

    <group if="$(arg joystick)">
      <node name="joy_node" pkg="joy" type="joy_node" output="screen"/>

        <param name="max_velocity_angular" value="0.5"/>
        <param name="max_velocity_linear" value="1.0"/>
      <node name="pplanner_teleop_twist_joy_node" pkg="pplanner_teleop_twist_joy" type="pplanner_teleop_twist_joy_node" output="screen">
        <remap from="cmd_vel" to="joy_teleop/cmd_vel"/>
        <!--remap from="cmd_vel" to="smb_velocity_controller/cmd_vel"/-->
        
      </node>
    </group>

    <!-- launch conveyor belt -->
    <group if="$(eval conveyor == 1)">
        <node ns="conveyor" name="spawn_model_belt" pkg="gazebo_ros" type="spawn_model" args="-file $(find demo_world)/urdf/conveyor.urdf -urdf -model conveyor_belt" respawn="false" output="screen" />
        <node name="cube_spawner" pkg="demo_world" type="demo.py" output="screen"/>
    </group>

</launch>
